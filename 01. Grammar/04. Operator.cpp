// Operator : 연산자

// +(덧셈) -(뺄셈) *(곱) /(나누기) %(나머지)

// /, % : 0으로 나눌 수 없다. 

#include <iostream>

using namespace std;

void main()
{
	//+ - * / %
	// 
	/*
	
	int temp = 0;
	int temp2 = 20;
	int temp3 = 30;

	temp += 20; // temp = temp + 20;

	temp = temp2 + temp3;
	//cout << temp;

	// 50 30 덧셈 뺄셈 곱하기 나누기 나머지


	// 관계 연산자 : 양 변의 관계를 true와 false로 나타내는 연산자
	// <, >, >=, <=, ==(같다), !=(다르다)

	cout << "1 < 2 1: " << (1 < 2) << endl;
	cout << "1 > 2 : " << (1 > 2) << endl;
	cout << "1 <= 2 :" << (1 <= 2) << endl;
	cout << "1 >= 2 :" << (1 >= 2) << endl;
	cout << "1 == 2 :" << (1 == 2) << endl;
	cout << "1 != 2 :" << (1 != 2) << endl;
	*/
	// 논리 연산자 : 양 변의 명제 관계가 맞는지 true와 false로 나타내는 연산자 
	// AND(그리고)(&&) / OR(또는)(||)
	
	/*
	AND
	A  B
	1  1  1
	1  0  0
	0  1  0
	0  0  0

	OR
	A  B
	1  1  1
	1  0  1
	0  1  1
	0  0  0
	*/

	bool temp1, temp2;


	temp1 = true; temp2 = true;
	cout << (temp1 && temp2) << endl;
	cout << "내 답 : " << "결과 :" << (temp1 || temp2) << endl;

	temp1 = false; temp2 = true;
	cout << (temp1 && temp2) << endl;
	cout << "내 답 : " << "결과 :" << (temp1 || temp2) << endl;

	temp1 = true; temp2 = false;
	cout << (temp1 && temp2) << endl;
	cout << "내 답 : " << "결과 :" << (temp1 || temp2) << endl;

	temp1 = false; temp2 = false;
	cout << (temp1 && temp2) << endl;

	//&& -> ||

	cout << "내 답 : " << "결과 :" << (temp1 || temp2) << endl;

	/*
	비트 단위 논리 연산자 : 비트 단위로 논리 연산을 하는 연산자
	AND(&) / OR(|) / XOR(^)

	AND
	A  B
	1  1  1
	1  0  0
	0  1  0
	0  0  0

	OR
	A  B
	1  1  1
	1  0  1
	0  1  1
	0  0  0

	XOR
	A  B
	1  1  0
	1  0  1
	0  1  1
	0  0  0


	16 / 2 


	 0110 = 6
	&0111 = 7
	-----
	 0110 = 6 

	  4+2
	 0110
	|0111
	-----
	 0111 =  7

	 8 4 2 1 
	 0110
	^0111
	-----
	 0001 = 1

	 8  4 +2 +1 = 7
	 0  1  1  1

	*/

	cout << "6 & 7 :" << (6 & 7) << endl;
	cout << "6 | 7 :" << (6 | 7) << endl;
	cout << "6 ^ 7 :" << (6 ^ 7) << endl;


	/*
	
	16 8  & | ^
	cout << "내 답 : " << "결과 :" << (16 & 8) << endl;
	

	 10000
	&01000
	 00000 = 0
	*/


	/*
	Shift Operator : 쉬프트 연산자
	<< , >>

	왼쪽 이동
	0010 << 1 ==> 0100
	0010 << 2 ==> 1000

	오른쪽 이동
	0100 >> 1 ==> 0010
	0100 >> 2 ==> 0001
	*/

	//7 ==> 0111

	/*
	<-
	0111
	1110 = 14

	->
	0111
	0011 = 3
	->
	5 => 0101
	0010 => 2 

	*/

	// 1010 => 10  9(x)
	//
// 
	// 왼쪽 이동
	cout << "내 답 : 10" << "결과 값 :" << (5 << 1) << endl;
	// 오른쪽 이동
	cout << "내 답 : 2" << "결과 값 :" << (5 >> 1) << endl;

	int num1; // 4byte

	/*
	00000000 00000000 00000001 01001000
	
	<< 1
	000000 00000000 00000001 0100100000

	>> 2
	0000000000 00000000 00000001 010010
	<< : 왼쪽 쉬프트 / 왼쪽 이동
	>> : 오른쪽 쉬프트 / 오른쪽 이동
	
	숫자 7을
	
	왼쪽 쉬프트 연산으로 3
	오른쪽 쉬프트 연산으로 1

	*/

	int num = 13; // 이진수로 변경

	/*
	     8 4 2 1
	7 -> 0 1 1 1(7)
	
	0111
	
	00000000 00000000 00000000 00000111 -> 7
	<< 3
	00000000 00000000 00000000 00111000 -> num
	>> 1
	00000000 00000000 00000000 00011100
	>> 3
	00000000 00000000 00000000 00000011
	*/

	num <<= 3; // num = num << 3;
	cout << "내가 생각한 값 : () /" << num << endl;

	num >>= 1;
	cout << "내가 생각한 값 : () /" << num << endl;
	// 숙제
	// 복습!!!!!!!!!!!! 중요!!!!!!!


	/*1
	      16  8  4  2  1
	13 -> 0   1  1  0  1
	
	00000000 00000000 00000000 00001101 -> 13

	<< 3
	00000000 00000000 00000000 01101000
	
	>> 1
	00000000 00000000 00000000 00110100
	

	
	*/
}